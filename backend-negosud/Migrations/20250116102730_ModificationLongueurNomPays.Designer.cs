// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend_negosud.entities;

#nullable disable

namespace backend_negosud.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20250116102730_ModificationLongueurNomPays")]
    partial class ModificationLongueurNomPays
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lier", b =>
                {
                    b.Property<int>("AdresseId")
                        .HasColumnType("integer")
                        .HasColumnName("adresse_id");

                    b.Property<int>("LivraisonId")
                        .HasColumnType("integer")
                        .HasColumnName("livraison_id");

                    b.HasKey("AdresseId", "LivraisonId")
                        .HasName("lier_pkey");

                    b.HasIndex("LivraisonId");

                    b.ToTable("lier", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.Adresse", b =>
                {
                    b.Property<int>("AdresseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("adresse_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdresseId"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<int>("CodePostal")
                        .HasColumnType("integer")
                        .HasColumnName("code_postal");

                    b.Property<string>("Departement")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("departement");

                    b.Property<int?>("FournisseurId")
                        .HasColumnType("integer")
                        .HasColumnName("fournisseur_id");

                    b.Property<int>("Numero")
                        .HasColumnType("integer")
                        .HasColumnName("numero");

                    b.Property<int>("PaysId")
                        .HasColumnType("integer")
                        .HasColumnName("pays_id");

                    b.Property<int?>("UtilisateurId")
                        .HasColumnType("integer")
                        .HasColumnName("utilisateur_id");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("ville");

                    b.HasKey("AdresseId")
                        .HasName("adresse_pkey");

                    b.HasIndex("ClientId");

                    b.HasIndex("FournisseurId");

                    b.HasIndex("PaysId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("adresse", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("article_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ArticleId"));

                    b.Property<int>("FamilleId")
                        .HasColumnType("integer")
                        .HasColumnName("famille_id");

                    b.Property<int>("FournisseurId")
                        .HasColumnType("integer")
                        .HasColumnName("fournisseur_id");

                    b.Property<string>("Libelle")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("libelle");

                    b.Property<double?>("Prix")
                        .HasColumnType("double precision")
                        .HasColumnName("prix");

                    b.Property<string>("Reference")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("reference");

                    b.Property<int>("TvaId")
                        .HasColumnType("integer")
                        .HasColumnName("tva_id");

                    b.HasKey("ArticleId")
                        .HasName("article_pkey");

                    b.HasIndex("FamilleId");

                    b.HasIndex("FournisseurId");

                    b.HasIndex("TvaId");

                    b.ToTable("article", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.BonCommande", b =>
                {
                    b.Property<int>("BonCommandeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bon_commande_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BonCommandeId"));

                    b.Property<decimal?>("Prix")
                        .HasPrecision(15, 3)
                        .HasColumnType("numeric(15,3)")
                        .HasColumnName("prix");

                    b.Property<string>("Reference")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("reference");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("integer")
                        .HasColumnName("utilisateur_id");

                    b.HasKey("BonCommandeId")
                        .HasName("bon_commande_pkey");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("bon_commande", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("EstValide")
                        .HasColumnType("boolean")
                        .HasColumnName("est_valide");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("mot_de_passe");

                    b.Property<string>("Nom")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nom");

                    b.Property<string>("Prenom")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("prenom");

                    b.Property<string>("Tel")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tel");

                    b.HasKey("ClientId")
                        .HasName("client_pkey");

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.Commande", b =>
                {
                    b.Property<int>("CommandeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("commande_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommandeId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_creation");

                    b.Property<int?>("FactureId")
                        .HasColumnType("integer")
                        .HasColumnName("facture_id");

                    b.Property<int>("LivraisonId")
                        .HasColumnType("integer")
                        .HasColumnName("livraison_id");

                    b.Property<int>("Quantite")
                        .HasColumnType("integer")
                        .HasColumnName("quantite");

                    b.Property<bool>("Valide")
                        .HasColumnType("boolean")
                        .HasColumnName("valide");

                    b.HasKey("CommandeId")
                        .HasName("commande_pkey");

                    b.HasIndex("ClientId");

                    b.HasIndex("LivraisonId");

                    b.HasIndex(new[] { "FactureId" }, "commande_facture_id_key")
                        .IsUnique();

                    b.ToTable("commande", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.Facture", b =>
                {
                    b.Property<int>("FactureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("facture_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FactureId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<int?>("CommandeId")
                        .HasColumnType("integer")
                        .HasColumnName("commande_id");

                    b.Property<DateTime?>("DateFacturation")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_facturation");

                    b.Property<double>("MontantHt")
                        .HasColumnType("double precision")
                        .HasColumnName("montant_ht");

                    b.Property<double>("MontantTtc")
                        .HasColumnType("double precision")
                        .HasColumnName("montant_ttc");

                    b.Property<double>("MontantTva")
                        .HasColumnType("double precision")
                        .HasColumnName("montant_tva");

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("reference");

                    b.HasKey("FactureId")
                        .HasName("facture_pkey");

                    b.HasIndex("ClientId");

                    b.HasIndex(new[] { "CommandeId" }, "facture_commande_id_key")
                        .IsUnique();

                    b.ToTable("facture", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.Famille", b =>
                {
                    b.Property<int>("FamilleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("famille_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FamilleId"));

                    b.Property<string>("Nom")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nom");

                    b.HasKey("FamilleId")
                        .HasName("famille_pkey");

                    b.ToTable("famille", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.Fournisseur", b =>
                {
                    b.Property<int>("FournisseurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("fournisseur_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FournisseurId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Nom")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nom");

                    b.Property<string>("RaisonSociale")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("raison_sociale");

                    b.Property<string>("Tel")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("tel");

                    b.HasKey("FournisseurId")
                        .HasName("fournisseur_pkey");

                    b.ToTable("fournisseur", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ImageId"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer")
                        .HasColumnName("article_id");

                    b.Property<string>("Format")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("format");

                    b.Property<string>("Libelle")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("libelle");

                    b.Property<string>("Slug")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("slug");

                    b.HasKey("ImageId")
                        .HasName("image_pkey");

                    b.HasIndex("ArticleId");

                    b.ToTable("image", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.Inventorier", b =>
                {
                    b.Property<int>("UtilisateurId")
                        .HasColumnType("integer")
                        .HasColumnName("utilisateur_id");

                    b.Property<int>("StockId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_id");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_modification");

                    b.Property<int>("QuantitePostModification")
                        .HasColumnType("integer")
                        .HasColumnName("quantite_post_modification");

                    b.Property<int>("QuantitePrecedente")
                        .HasColumnType("integer")
                        .HasColumnName("quantite_precedente");

                    b.Property<string>("TypeModification")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("type_modification");

                    b.HasKey("UtilisateurId", "StockId")
                        .HasName("inventorier_pkey");

                    b.HasIndex("StockId");

                    b.ToTable("inventorier", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.LigneBonCommande", b =>
                {
                    b.Property<int>("LigneBonCommandeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ligne_bon_commande_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LigneBonCommandeId"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer")
                        .HasColumnName("article_id");

                    b.Property<int>("BonCommandeId")
                        .HasColumnType("integer")
                        .HasColumnName("bon_commande_id");

                    b.Property<int?>("LigneLivraisonId")
                        .HasColumnType("integer")
                        .HasColumnName("ligne_livraison_id");

                    b.Property<double>("PrixUnitaire")
                        .HasColumnType("double precision")
                        .HasColumnName("prix_unitaire");

                    b.Property<int>("Quantite")
                        .HasColumnType("integer")
                        .HasColumnName("quantite");

                    b.HasKey("LigneBonCommandeId")
                        .HasName("ligne_bon_commande_pkey");

                    b.HasIndex("ArticleId");

                    b.HasIndex("BonCommandeId");

                    b.HasIndex("LigneLivraisonId");

                    b.ToTable("ligne_bon_commande", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.LigneCommande", b =>
                {
                    b.Property<int>("LigneCommandeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ligne_commande_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LigneCommandeId"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer")
                        .HasColumnName("article_id");

                    b.Property<int>("CommandeId")
                        .HasColumnType("integer")
                        .HasColumnName("commande_id");

                    b.Property<int>("Quantite")
                        .HasColumnType("integer")
                        .HasColumnName("quantite");

                    b.HasKey("LigneCommandeId")
                        .HasName("ligne_commande_pkey");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CommandeId");

                    b.ToTable("ligne_commande", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.LigneLivraison", b =>
                {
                    b.Property<int>("LigneLivraisonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ligne_livraison_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LigneLivraisonId"));

                    b.Property<int>("LivraisonId")
                        .HasColumnType("integer")
                        .HasColumnName("livraison_id");

                    b.Property<int>("Quantite")
                        .HasColumnType("integer")
                        .HasColumnName("quantite");

                    b.HasKey("LigneLivraisonId")
                        .HasName("ligne_livraison_pkey");

                    b.HasIndex("LivraisonId");

                    b.ToTable("ligne_livraison", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.Livraison", b =>
                {
                    b.Property<int>("LivraisonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("livraison_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LivraisonId"));

                    b.Property<DateTime?>("DateEstimee")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_estimee");

                    b.Property<DateTime?>("DateLivraison")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_livraison");

                    b.Property<bool?>("Livree")
                        .HasColumnType("boolean")
                        .HasColumnName("livree");

                    b.HasKey("LivraisonId")
                        .HasName("livraison_pkey");

                    b.ToTable("livraison", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.Pays", b =>
                {
                    b.Property<int>("PaysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pays_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaysId"));

                    b.Property<string>("Nom")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nom");

                    b.HasKey("PaysId")
                        .HasName("pays_pkey");

                    b.ToTable("pays", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.Reglement", b =>
                {
                    b.Property<int>("ReglementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("reglement_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReglementId"));

                    b.Property<int>("CommandeId")
                        .HasColumnType("integer")
                        .HasColumnName("commande_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<double?>("Montant")
                        .HasColumnType("double precision")
                        .HasColumnName("montant");

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("reference");

                    b.HasKey("ReglementId")
                        .HasName("reglement_pkey");

                    b.HasIndex("CommandeId");

                    b.ToTable("reglement", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.ReinitialisationMdp", b =>
                {
                    b.Property<int>("ReinitialisationMdpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("reinitialisation_mdp_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReinitialisationMdpId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("DateDemande")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_demande");

                    b.Property<string>("MotDePasse")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("mot_de_passe");

                    b.Property<string>("ResetToken")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("reset_token");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("integer")
                        .HasColumnName("utilisateur_id");

                    b.HasKey("ReinitialisationMdpId")
                        .HasName("reinitialisation_mdp_pkey");

                    b.HasIndex("ClientId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("reinitialisation_mdp", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Nom")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("nom");

                    b.HasKey("RoleId")
                        .HasName("role_pkey");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("stock_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StockId"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer")
                        .HasColumnName("article_id");

                    b.Property<int?>("Quantite")
                        .HasColumnType("integer")
                        .HasColumnName("quantite");

                    b.Property<bool>("ReapprovisionnementAuto")
                        .HasColumnType("boolean")
                        .HasColumnName("reapprovisionnement_auto");

                    b.Property<string>("RefLot")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ref_lot");

                    b.Property<double?>("SeuilMinimum")
                        .HasColumnType("double precision")
                        .HasColumnName("seuil_minimum");

                    b.HasKey("StockId")
                        .HasName("stock_pkey");

                    b.HasIndex("ArticleId");

                    b.ToTable("stock", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.Tva", b =>
                {
                    b.Property<int>("TvaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tva_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TvaId"));

                    b.Property<double?>("Valeur")
                        .HasColumnType("double precision")
                        .HasColumnName("valeur");

                    b.HasKey("TvaId")
                        .HasName("tva_pkey");

                    b.ToTable("tva", (string)null);
                });

            modelBuilder.Entity("backend_negosud.entities.Utilisateur", b =>
                {
                    b.Property<int>("UtilisateurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("utilisateur_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UtilisateurId"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("access_token");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("mot_de_passe");

                    b.Property<string>("Nom")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nom");

                    b.Property<string>("Prenom")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("prenom");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("Telephone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("telephone");

                    b.HasKey("UtilisateurId")
                        .HasName("utilisateur_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("utilisateur", (string)null);
                });

            modelBuilder.Entity("Lier", b =>
                {
                    b.HasOne("backend_negosud.entities.Adresse", null)
                        .WithMany()
                        .HasForeignKey("AdresseId")
                        .IsRequired()
                        .HasConstraintName("lier_adresse_id_fkey");

                    b.HasOne("backend_negosud.entities.Livraison", null)
                        .WithMany()
                        .HasForeignKey("LivraisonId")
                        .HasConstraintName("lier_livraison_id_fkey");
                });

            modelBuilder.Entity("backend_negosud.entities.Adresse", b =>
                {
                    b.HasOne("backend_negosud.entities.Client", "Client")
                        .WithMany("Adresses")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("adresse_client_id_fkey");

                    b.HasOne("backend_negosud.entities.Fournisseur", "Fournisseur")
                        .WithMany("Adresses")
                        .HasForeignKey("FournisseurId")
                        .HasConstraintName("adresse_fournisseur_id_fkey");

                    b.HasOne("backend_negosud.entities.Pays", "Pays")
                        .WithMany("Adresses")
                        .HasForeignKey("PaysId")
                        .IsRequired()
                        .HasConstraintName("adresse_pays_id_fkey");

                    b.HasOne("backend_negosud.entities.Utilisateur", "Utilisateur")
                        .WithMany("Adresses")
                        .HasForeignKey("UtilisateurId")
                        .HasConstraintName("adresse_utilisateur_id_fkey");

                    b.Navigation("Client");

                    b.Navigation("Fournisseur");

                    b.Navigation("Pays");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("backend_negosud.entities.Article", b =>
                {
                    b.HasOne("backend_negosud.entities.Famille", "Famille")
                        .WithMany("Articles")
                        .HasForeignKey("FamilleId")
                        .IsRequired()
                        .HasConstraintName("article_famille_id_fkey");

                    b.HasOne("backend_negosud.entities.Fournisseur", "Fournisseur")
                        .WithMany("Articles")
                        .HasForeignKey("FournisseurId")
                        .IsRequired()
                        .HasConstraintName("article_fournisseur_id_fkey");

                    b.HasOne("backend_negosud.entities.Tva", "Tva")
                        .WithMany("Articles")
                        .HasForeignKey("TvaId")
                        .IsRequired()
                        .HasConstraintName("article_tva_id_fkey");

                    b.Navigation("Famille");

                    b.Navigation("Fournisseur");

                    b.Navigation("Tva");
                });

            modelBuilder.Entity("backend_negosud.entities.BonCommande", b =>
                {
                    b.HasOne("backend_negosud.entities.Utilisateur", "Utilisateur")
                        .WithMany("BonCommandes")
                        .HasForeignKey("UtilisateurId")
                        .IsRequired()
                        .HasConstraintName("bon_commande_utilisateur_id_fkey");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("backend_negosud.entities.Commande", b =>
                {
                    b.HasOne("backend_negosud.entities.Client", "Client")
                        .WithMany("Commandes")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("commande_client_id_fkey");

                    b.HasOne("backend_negosud.entities.Facture", "Facture")
                        .WithOne("Commande")
                        .HasForeignKey("backend_negosud.entities.Commande", "FactureId")
                        .HasConstraintName("commande_facture_id_fkey");

                    b.HasOne("backend_negosud.entities.Livraison", "Livraison")
                        .WithMany("Commandes")
                        .HasForeignKey("LivraisonId")
                        .IsRequired()
                        .HasConstraintName("commande_livraison_id_fkey");

                    b.Navigation("Client");

                    b.Navigation("Facture");

                    b.Navigation("Livraison");
                });

            modelBuilder.Entity("backend_negosud.entities.Facture", b =>
                {
                    b.HasOne("backend_negosud.entities.Client", "Client")
                        .WithMany("Factures")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("facture_client_id_fkey");

                    b.HasOne("backend_negosud.entities.Commande", "CommandeNavigation")
                        .WithOne("FactureNavigation")
                        .HasForeignKey("backend_negosud.entities.Facture", "CommandeId")
                        .HasConstraintName("facture_commande_id_fkey");

                    b.Navigation("Client");

                    b.Navigation("CommandeNavigation");
                });

            modelBuilder.Entity("backend_negosud.entities.Image", b =>
                {
                    b.HasOne("backend_negosud.entities.Article", "Article")
                        .WithMany("Images")
                        .HasForeignKey("ArticleId")
                        .IsRequired()
                        .HasConstraintName("image_article_id_fkey");

                    b.Navigation("Article");
                });

            modelBuilder.Entity("backend_negosud.entities.Inventorier", b =>
                {
                    b.HasOne("backend_negosud.entities.Stock", "Stock")
                        .WithMany("Inventoriers")
                        .HasForeignKey("StockId")
                        .IsRequired()
                        .HasConstraintName("inventorier_stock_id_fkey");

                    b.HasOne("backend_negosud.entities.Utilisateur", "Utilisateur")
                        .WithMany("Inventoriers")
                        .HasForeignKey("UtilisateurId")
                        .IsRequired()
                        .HasConstraintName("inventorier_utilisateur_id_fkey");

                    b.Navigation("Stock");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("backend_negosud.entities.LigneBonCommande", b =>
                {
                    b.HasOne("backend_negosud.entities.Article", "Article")
                        .WithMany("LigneBonCommandes")
                        .HasForeignKey("ArticleId")
                        .IsRequired()
                        .HasConstraintName("ligne_bon_commande_article_id_fkey");

                    b.HasOne("backend_negosud.entities.BonCommande", "BonCommande")
                        .WithMany("LigneBonCommandes")
                        .HasForeignKey("BonCommandeId")
                        .IsRequired()
                        .HasConstraintName("ligne_bon_commande_bon_commande_id_fkey");

                    b.HasOne("backend_negosud.entities.LigneLivraison", "LigneLivraison")
                        .WithMany("LigneBonCommandes")
                        .HasForeignKey("LigneLivraisonId")
                        .HasConstraintName("ligne_bon_commande_ligne_livraison_id_fkey");

                    b.Navigation("Article");

                    b.Navigation("BonCommande");

                    b.Navigation("LigneLivraison");
                });

            modelBuilder.Entity("backend_negosud.entities.LigneCommande", b =>
                {
                    b.HasOne("backend_negosud.entities.Article", "Article")
                        .WithMany("LigneCommandes")
                        .HasForeignKey("ArticleId")
                        .IsRequired()
                        .HasConstraintName("ligne_commande_article_id_fkey");

                    b.HasOne("backend_negosud.entities.Commande", "Commande")
                        .WithMany("LigneCommandes")
                        .HasForeignKey("CommandeId")
                        .IsRequired()
                        .HasConstraintName("ligne_commande_commande_id_fkey");

                    b.Navigation("Article");

                    b.Navigation("Commande");
                });

            modelBuilder.Entity("backend_negosud.entities.LigneLivraison", b =>
                {
                    b.HasOne("backend_negosud.entities.Livraison", "Livraison")
                        .WithMany("LigneLivraisons")
                        .HasForeignKey("LivraisonId")
                        .IsRequired()
                        .HasConstraintName("ligne_livraison_livraison_id_fkey");

                    b.Navigation("Livraison");
                });

            modelBuilder.Entity("backend_negosud.entities.Reglement", b =>
                {
                    b.HasOne("backend_negosud.entities.Commande", "Commande")
                        .WithMany("Reglements")
                        .HasForeignKey("CommandeId")
                        .IsRequired()
                        .HasConstraintName("reglement_commande_id_fkey");

                    b.Navigation("Commande");
                });

            modelBuilder.Entity("backend_negosud.entities.ReinitialisationMdp", b =>
                {
                    b.HasOne("backend_negosud.entities.Client", "Client")
                        .WithMany("ReinitialisationMdps")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("reinitialisation_mdp_client_id_fkey");

                    b.HasOne("backend_negosud.entities.Utilisateur", "Utilisateur")
                        .WithMany("ReinitialisationMdps")
                        .HasForeignKey("UtilisateurId")
                        .IsRequired()
                        .HasConstraintName("reinitialisation_mdp_utilisateur_id_fkey");

                    b.Navigation("Client");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("backend_negosud.entities.Stock", b =>
                {
                    b.HasOne("backend_negosud.entities.Article", "Article")
                        .WithMany("Stocks")
                        .HasForeignKey("ArticleId")
                        .IsRequired()
                        .HasConstraintName("stock_article_id_fkey");

                    b.Navigation("Article");
                });

            modelBuilder.Entity("backend_negosud.entities.Utilisateur", b =>
                {
                    b.HasOne("backend_negosud.entities.Role", "Role")
                        .WithMany("Utilisateurs")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("utilisateur_role_id_fkey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("backend_negosud.entities.Article", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("LigneBonCommandes");

                    b.Navigation("LigneCommandes");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("backend_negosud.entities.BonCommande", b =>
                {
                    b.Navigation("LigneBonCommandes");
                });

            modelBuilder.Entity("backend_negosud.entities.Client", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Commandes");

                    b.Navigation("Factures");

                    b.Navigation("ReinitialisationMdps");
                });

            modelBuilder.Entity("backend_negosud.entities.Commande", b =>
                {
                    b.Navigation("FactureNavigation");

                    b.Navigation("LigneCommandes");

                    b.Navigation("Reglements");
                });

            modelBuilder.Entity("backend_negosud.entities.Facture", b =>
                {
                    b.Navigation("Commande");
                });

            modelBuilder.Entity("backend_negosud.entities.Famille", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("backend_negosud.entities.Fournisseur", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Articles");
                });

            modelBuilder.Entity("backend_negosud.entities.LigneLivraison", b =>
                {
                    b.Navigation("LigneBonCommandes");
                });

            modelBuilder.Entity("backend_negosud.entities.Livraison", b =>
                {
                    b.Navigation("Commandes");

                    b.Navigation("LigneLivraisons");
                });

            modelBuilder.Entity("backend_negosud.entities.Pays", b =>
                {
                    b.Navigation("Adresses");
                });

            modelBuilder.Entity("backend_negosud.entities.Role", b =>
                {
                    b.Navigation("Utilisateurs");
                });

            modelBuilder.Entity("backend_negosud.entities.Stock", b =>
                {
                    b.Navigation("Inventoriers");
                });

            modelBuilder.Entity("backend_negosud.entities.Tva", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("backend_negosud.entities.Utilisateur", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("BonCommandes");

                    b.Navigation("Inventoriers");

                    b.Navigation("ReinitialisationMdps");
                });
#pragma warning restore 612, 618
        }
    }
}
